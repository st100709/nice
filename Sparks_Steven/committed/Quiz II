			Quiz
			What is happening when we have the following code in our app.js file: http.createServer(function (request, response){ ... }?
			 We're passing a callback function to the createServer method in the http object.
			 Whatever we put inside this function gets executed whenever a client sends a http request to the NodeJS server
			 When the client makes an http request the Node server will execute the function passed in the createServer method and also pass two variables to this function.
			 The request variable would contain information about the http request made (who it is, browser info, etc)
			 The response variable would have methods/properties you can access to render different response types back to the client.
	2	1	 All of the above.
			If you had the following code in your app.js, 'http.createServer(function (request, response){ console.log('hello'); });' when would it log hello in the terminal?
		1	 When the server starts
	2		 Whenever someone requests something from the server created from your Node.js code
			If you had the following code in your app.js, 'http.createServer(function (request, response){ console.log('hello'); });' and you wanted to see more information about the user that connected to your server, where would you look?
			 In the http object (you could log http and see if it has properties/methods that could be useful for you)
	2	1	 In the request object
			 In the response object
			If you had the following code in your app.js, 'http.createServer(function (request, response){ console.log('hello'); }); console.log('REQUEST OBJECT', request);' why would it not properly log the request object?
			 It does!
	2	1	 request object is only available inside the function (request, response), not outside this scope!
			Say for your code: 'http.createServer(function (request, response){ console.log('hello'); });' you wanted to find out which methods are available for you to affect how the server sends the http response. What might be the quickest way to do this?
	2	1	 By simply logging the response object and going through the object to see which properties/methods exist in that object and then going into the node documentation to learn more about properties/methods.
			 By doing random google/stackoverflow searches hoping that you'll find what you need. Normally this could be effective but for Node, since it's still at its infancy, a lot of what you find in StackOverflow could be confusing and it could introduce wrong ways to do things when there are simpler ways of doing what you plan. In other words, we don't want you to go through too much stackoverflow/google resources as this could actually slow you down and make you more confused than helping you...
			On the server-side, how would you import mega_module.js into awesome_app.js?
			 import mega_module to awesome_app;
			 if(!mega_module.js) { awesome_app.import('mega_module.js') };
	2	1	 var mega_module = require('./mega_module');
			Now, in your mega_module.js, you have a method called 'magic'. Assuming you've already imported mega_module.js, how would you call this method from awesome_app.js?
			 module.exports.magic();
	2	1	 mega_module.magic();
			 var magic = mega_module('magic');