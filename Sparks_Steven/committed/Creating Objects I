// Modify your VehicleConstructor (from create objects I) to use this & new (and follow the JS conventions talked about in the previous chapters). To recap, here were the requirements from objects I:

// Create a vehicleConstructor that takes in the name, number of wheels, and number of passengers
// Each vehicle should have a makeNoise method
// Using the constructor, create a Bike
// redefine the Bike’s makeNoise method to print “ring ring!”
// Using the constructor, create a Sedan
// redefine the Sedan’s makeNoise method to print “Honk Honk!”
// Using the constructor, create a Bus
// Give the bus a pickUpPassengers method that takes in the number of passengers to pick up and adds them to the passenger count 

// Then make the following modifications:
	// Have the Vehicle constructor also take in a “speed”
	// Store the speed as an attribute
	// Create a private variable called distance_travelled that starts at 0
	// Create a private method called updateDistanceTravelled that increments distance traveled by speed
	// Add a method to the Vehicle called “move” that calls updateDistanceTravelled and then makeNoise
	// Add a method called checkMiles that console.logs the distance_travelled


function VehicleConstructor(name, noofWheels, noofPass, speed){
	if (!(this instanceof VehicleConstructor)){
    return new VehicleConstructor(name, noofWheels,noofPass, speed);
  	}
 // private variables - not referencd using "this"
	var distance_traveled = 0;
  	var self = this;  //snapshot of "this" avail for all methods

 // private methods - cannot directly change or call this fx value, must call this.move
  	function updateDistanceTraveled(){
    	distanceTraveled += self.speed; //since this.speed is not available here - use self from line 7
    	console.log(distance_traveled);
  	}
 // public variables
	this.name = name || "bike"; //  || value is the default in construction if no params are given
	this.noofWheels = noofWheels || 2;
	this.noofPass = noofPass || 2;
	this.speed = speed || 0;

	this.makeNoise = function(noise){
    	var noise = noise || "vrroommm";
    	console.log(noise)
	};
	this.move = function(){
    	this.makeNoise();
    	updateDistanceTraveled();
  	};
 	this.checkMiles = function(){
    	console.log(distanceTraveled);
  	};
}

var bike = new VehicleConstructor("Bike", 2, 1);
// console.log(this);
bike.makeNoise = function(){
	console.log("Ring Ring!");
}

var sedan = new VehicleConstructor("Sedan", 4, 5);
// console.log(this);
sedan.makeNoise = function(){
	console.log("Honk Honk!");
}

var bus = new VehicleConstructor("Bus", 6, 15);
// console.log(this);
bus.addpass = function(n){
	vehicle.noofPass + n;
}
// this.noofPass();

var car = new VehicleConstructor("car", 4, 2, 40);
car.move();
car.checkMiles();
//cannot do car.updateDistanceTraveled() directly, you can car.move (to update distance) and car.checkMiles (to view distance)
console.log(car.speed);

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Bonus: Use ES6 Class!
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/ Classes
Note: Making truly (or almost truly) private vars using ES6 classes is rather advanced at this point in your JS development career.
 Modify the Vehicle constructor to use this & new as well as the JS conventions taught in the previous chapters
 Make the advanced modifications to the Vehicle constructor and then upload your code below

'use strict'
// note the lack of private variables/methods: heres some helpful info!
// https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Contributor_s_Guide/Private_Properties

class Vehicle {
  constructor(name, wheels, passengerNumber, speed) {
    this.speed = speed;
    this.name = name || "unicycle";
    this.wheels = wheels || 1;
    this.passengerNumber = passengerNumber || 0;
    this.distanceTraveled = 0;
  }
  updateDistanceTraveled(){
    this.distanceTraveled += this.speed;
    console.log(this.distanceTraveled);
  }
  makeNoise (noise){
    var noise = noise || "Honk Honk";
    console.log(noise);
  };
  move (){
    this.makeNoise();
    this.updateDistanceTraveled();
  };
  checkMiles (){
    console.log(this.distanceTraveled);
  };
}

let vehicle = new Vehicle("Prius", 4, 4, 60); // we all know that a prius can't go this fast though...
vehicle.updateDistanceTraveled();
vehicle.move();
vehicle.checkMiles();